datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String?
  image         String?
  announcement         Announcement[]
  replies       Reply[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Job           Job[]
}

model JobType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobIndustry {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  jobs        Job[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  JobCategory JobCategory[]
}

model JobLevel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  level     Int? // 1 for Entry Level, 2 for Junior, 3 for Mid-Level, etc.
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobLocation {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  country      String?
  jobs         Job[]
  ProvinceCity ProvinceCity[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ProvinceCity {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String       @unique
  districts     Districts[]
  Job           Job[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  JobLocation   JobLocation? @relation(fields: [jobLocationId], references: [id])
  jobLocationId String?      @db.ObjectId
}

model Districts {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @unique
  communes       Communes[]
  Job            Job[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  ProvinceCity   ProvinceCity? @relation(fields: [provinceCityId], references: [id])
  provinceCityId String?       @db.ObjectId
}

model Communes {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String     @unique
  districts  Districts? @relation(fields: [districtId], references: [id])
  districtId String     @db.ObjectId
  Job        Job[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model JobSalary {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  minSalary Int?
  maxSalary Int?
  label     String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobCategory {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String       @unique
  JobIndustry   JobIndustry? @relation(fields: [jobIndustryId], references: [id])
  jobIndustryId String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Job           Job[]
}

model Job {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  position         String
  pax              Int           @default(1)
  description      String
  requirements     String?
  responsibilities String?
  image            String?
  author           User          @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail      String
  contact          String[]
  published        Boolean       @default(true)
  likes            Int           @default(0)
  views            Int           @default(0)
  publishedAt      String?
  closeDate        String?
  gender           String?
  qualification    String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  jobCategoryId    String?       @db.ObjectId
  JobCategory      JobCategory?  @relation(fields: [jobCategoryId], references: [id])
  jobTypeId        String        @db.ObjectId
  JobType          JobType       @relation(fields: [jobTypeId], references: [id])
  JobIndustry      JobIndustry?  @relation(fields: [jobIndustryId], references: [id])
  jobIndustryId    String?       @db.ObjectId
  JobLevel         JobLevel?     @relation(fields: [jobLevelId], references: [id])
  jobLevelId       String?       @db.ObjectId
  JobLocation      JobLocation?  @relation(fields: [jobLocationId], references: [id])
  jobLocationId    String?       @db.ObjectId
  JobSalary        JobSalary?    @relation(fields: [jobSalaryId], references: [id])
  jobSalaryId      String?       @db.ObjectId
  Communes         Communes?     @relation(fields: [communesId], references: [id])
  communesId       String?       @db.ObjectId
  Districts        Districts?    @relation(fields: [districtsId], references: [id])
  districtsId      String?       @db.ObjectId
  ProvinceCity     ProvinceCity? @relation(fields: [provinceCityId], references: [id])
  provinceCityId   String?       @db.ObjectId
}

model PostCategory {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  AnnouncementId String @db.ObjectId
  categoryId     String @db.ObjectId

  announcement Announcement @relation(fields: [AnnouncementId], references: [id])
  category     Category     @relation(fields: [categoryId], references: [id])
}

model Category {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String         @unique
  categories PostCategory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Announcement {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  images      String[]
  author      User           @relation(fields: [authorEmail], references: [email])
  authorEmail String
  categories  PostCategory[]
  links       String[]
  published   Boolean        @default(true)
  comments    Comment[]
  likes       Int            @default(0)
  views       Int            @default(0)
  publishedAt String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Comment {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  text         String?
  author       User?        @relation(fields: [authorEmail], references: [email])
  authorEmail  String?
  announcement Announcement @relation(fields: [postId], references: [id])
  postId       String       @db.ObjectId
  replies      Reply[]
  publishedAt  String?
  image        String?
  file         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

}

model Reply {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  publishedAt String?
  author      User     @relation(fields: [authorEmail], references: [email])
  authorEmail String
  comment     Comment  @relation(fields: [commentId], references: [id])
  commentId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
