
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String         @unique
  password      String?
  image         String?
  posts         Post[]
  replies       Reply[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  posts   Post[]   
}
 model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  image     String?
  public_id String?
  author    User     @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String  
  category  Category @relation(fields: [categoryId], references: [id])
  links     String[]
  categoryId String  @db.ObjectId
  comments  Comment[]
  likes     Int @default(0)
  views     Int @default(0)
  publishedAt String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Comment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  author   User     @relation(fields: [authorEmail], references: [email])
  authorEmail String  
  post     Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId   String  @db.ObjectId
  replies  Reply[]
  publishedAt String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Reply {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  publishedAt  String?
  author   User     @relation(fields: [authorEmail], references: [email])
  authorEmail String  
  comment     Comment @relation(fields: [commentId], references: [id],onDelete: Cascade)
  commentId   String  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}